// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project/project.proto

#ifndef PROTOBUF_project_2fproject_2eproto__INCLUDED
#define PROTOBUF_project_2fproject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ide {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_project_2fproject_2eproto();
void protobuf_AssignDesc_project_2fproject_2eproto();
void protobuf_ShutdownFile_project_2fproject_2eproto();

class Project;
class Project_Variant;

// ===================================================================

class Project_Variant : public ::google::protobuf::Message {
 public:
  Project_Variant();
  virtual ~Project_Variant();

  Project_Variant(const Project_Variant& from);

  inline Project_Variant& operator=(const Project_Variant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Project_Variant& default_instance();

  void Swap(Project_Variant* other);

  // implements Message ----------------------------------------------

  Project_Variant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Project_Variant& from);
  void MergeFrom(const Project_Variant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string build_dir = 2;
  inline bool has_build_dir() const;
  inline void clear_build_dir();
  static const int kBuildDirFieldNumber = 2;
  inline const ::std::string& build_dir() const;
  inline void set_build_dir(const ::std::string& value);
  inline void set_build_dir(const char* value);
  inline void set_build_dir(const char* value, size_t size);
  inline ::std::string* mutable_build_dir();
  inline ::std::string* release_build_dir();
  inline void set_allocated_build_dir(::std::string* build_dir);

  // optional string target = 3 [default = "all"];
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::std::string& target() const;
  inline void set_target(const ::std::string& value);
  inline void set_target(const char* value);
  inline void set_target(const char* value, size_t size);
  inline ::std::string* mutable_target();
  inline ::std::string* release_target();
  inline void set_allocated_target(::std::string* target);

  // @@protoc_insertion_point(class_scope:ide.proto.Project.Variant)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_build_dir();
  inline void clear_has_build_dir();
  inline void set_has_target();
  inline void clear_has_target();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* build_dir_;
  static ::std::string* _default_target_;
  ::std::string* target_;
  friend void  protobuf_AddDesc_project_2fproject_2eproto();
  friend void protobuf_AssignDesc_project_2fproject_2eproto();
  friend void protobuf_ShutdownFile_project_2fproject_2eproto();

  void InitAsDefaultInstance();
  static Project_Variant* default_instance_;
};
// -------------------------------------------------------------------

class Project : public ::google::protobuf::Message {
 public:
  Project();
  virtual ~Project();

  Project(const Project& from);

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Project& default_instance();

  void Swap(Project* other);

  // implements Message ----------------------------------------------

  Project* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Project_Variant Variant;

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string root = 2 [default = "."];
  inline bool has_root() const;
  inline void clear_root();
  static const int kRootFieldNumber = 2;
  inline const ::std::string& root() const;
  inline void set_root(const ::std::string& value);
  inline void set_root(const char* value);
  inline void set_root(const char* value, size_t size);
  inline ::std::string* mutable_root();
  inline ::std::string* release_root();
  inline void set_allocated_root(::std::string* root);

  // repeated string file = 3;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 3;
  inline const ::std::string& file(int index) const;
  inline ::std::string* mutable_file(int index);
  inline void set_file(int index, const ::std::string& value);
  inline void set_file(int index, const char* value);
  inline void set_file(int index, const char* value, size_t size);
  inline ::std::string* add_file();
  inline void add_file(const ::std::string& value);
  inline void add_file(const char* value);
  inline void add_file(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& file() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_file();

  // repeated .ide.proto.Project.Variant variant = 4;
  inline int variant_size() const;
  inline void clear_variant();
  static const int kVariantFieldNumber = 4;
  inline const ::ide::proto::Project_Variant& variant(int index) const;
  inline ::ide::proto::Project_Variant* mutable_variant(int index);
  inline ::ide::proto::Project_Variant* add_variant();
  inline const ::google::protobuf::RepeatedPtrField< ::ide::proto::Project_Variant >&
      variant() const;
  inline ::google::protobuf::RepeatedPtrField< ::ide::proto::Project_Variant >*
      mutable_variant();

  // @@protoc_insertion_point(class_scope:ide.proto.Project)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_root();
  inline void clear_has_root();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  static ::std::string* _default_root_;
  ::std::string* root_;
  ::google::protobuf::RepeatedPtrField< ::std::string> file_;
  ::google::protobuf::RepeatedPtrField< ::ide::proto::Project_Variant > variant_;
  friend void  protobuf_AddDesc_project_2fproject_2eproto();
  friend void protobuf_AssignDesc_project_2fproject_2eproto();
  friend void protobuf_ShutdownFile_project_2fproject_2eproto();

  void InitAsDefaultInstance();
  static Project* default_instance_;
};
// ===================================================================


// ===================================================================

// Project_Variant

// required string name = 1;
inline bool Project_Variant::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Project_Variant::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Project_Variant::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Project_Variant::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Project_Variant::name() const {
  // @@protoc_insertion_point(field_get:ide.proto.Project.Variant.name)
  return *name_;
}
inline void Project_Variant::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ide.proto.Project.Variant.name)
}
inline void Project_Variant::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ide.proto.Project.Variant.name)
}
inline void Project_Variant::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ide.proto.Project.Variant.name)
}
inline ::std::string* Project_Variant::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ide.proto.Project.Variant.name)
  return name_;
}
inline ::std::string* Project_Variant::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Project_Variant::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ide.proto.Project.Variant.name)
}

// required string build_dir = 2;
inline bool Project_Variant::has_build_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Project_Variant::set_has_build_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Project_Variant::clear_has_build_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Project_Variant::clear_build_dir() {
  if (build_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_dir_->clear();
  }
  clear_has_build_dir();
}
inline const ::std::string& Project_Variant::build_dir() const {
  // @@protoc_insertion_point(field_get:ide.proto.Project.Variant.build_dir)
  return *build_dir_;
}
inline void Project_Variant::set_build_dir(const ::std::string& value) {
  set_has_build_dir();
  if (build_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_dir_ = new ::std::string;
  }
  build_dir_->assign(value);
  // @@protoc_insertion_point(field_set:ide.proto.Project.Variant.build_dir)
}
inline void Project_Variant::set_build_dir(const char* value) {
  set_has_build_dir();
  if (build_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_dir_ = new ::std::string;
  }
  build_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:ide.proto.Project.Variant.build_dir)
}
inline void Project_Variant::set_build_dir(const char* value, size_t size) {
  set_has_build_dir();
  if (build_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_dir_ = new ::std::string;
  }
  build_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ide.proto.Project.Variant.build_dir)
}
inline ::std::string* Project_Variant::mutable_build_dir() {
  set_has_build_dir();
  if (build_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    build_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ide.proto.Project.Variant.build_dir)
  return build_dir_;
}
inline ::std::string* Project_Variant::release_build_dir() {
  clear_has_build_dir();
  if (build_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = build_dir_;
    build_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Project_Variant::set_allocated_build_dir(::std::string* build_dir) {
  if (build_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete build_dir_;
  }
  if (build_dir) {
    set_has_build_dir();
    build_dir_ = build_dir;
  } else {
    clear_has_build_dir();
    build_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ide.proto.Project.Variant.build_dir)
}

// optional string target = 3 [default = "all"];
inline bool Project_Variant::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Project_Variant::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Project_Variant::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Project_Variant::clear_target() {
  if (target_ != _default_target_) {
    target_->assign(*_default_target_);
  }
  clear_has_target();
}
inline const ::std::string& Project_Variant::target() const {
  // @@protoc_insertion_point(field_get:ide.proto.Project.Variant.target)
  return *target_;
}
inline void Project_Variant::set_target(const ::std::string& value) {
  set_has_target();
  if (target_ == _default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set:ide.proto.Project.Variant.target)
}
inline void Project_Variant::set_target(const char* value) {
  set_has_target();
  if (target_ == _default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(value);
  // @@protoc_insertion_point(field_set_char:ide.proto.Project.Variant.target)
}
inline void Project_Variant::set_target(const char* value, size_t size) {
  set_has_target();
  if (target_ == _default_target_) {
    target_ = new ::std::string;
  }
  target_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ide.proto.Project.Variant.target)
}
inline ::std::string* Project_Variant::mutable_target() {
  set_has_target();
  if (target_ == _default_target_) {
    target_ = new ::std::string(*_default_target_);
  }
  // @@protoc_insertion_point(field_mutable:ide.proto.Project.Variant.target)
  return target_;
}
inline ::std::string* Project_Variant::release_target() {
  clear_has_target();
  if (target_ == _default_target_) {
    return NULL;
  } else {
    ::std::string* temp = target_;
    target_ = const_cast< ::std::string*>(_default_target_);
    return temp;
  }
}
inline void Project_Variant::set_allocated_target(::std::string* target) {
  if (target_ != _default_target_) {
    delete target_;
  }
  if (target) {
    set_has_target();
    target_ = target;
  } else {
    clear_has_target();
    target_ = const_cast< ::std::string*>(_default_target_);
  }
  // @@protoc_insertion_point(field_set_allocated:ide.proto.Project.Variant.target)
}

// -------------------------------------------------------------------

// Project

// required string name = 1;
inline bool Project::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Project::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Project::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Project::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:ide.proto.Project.name)
  return *name_;
}
inline void Project::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ide.proto.Project.name)
}
inline void Project::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ide.proto.Project.name)
}
inline void Project::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ide.proto.Project.name)
}
inline ::std::string* Project::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ide.proto.Project.name)
  return name_;
}
inline ::std::string* Project::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Project::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ide.proto.Project.name)
}

// optional string root = 2 [default = "."];
inline bool Project::has_root() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Project::set_has_root() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Project::clear_has_root() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Project::clear_root() {
  if (root_ != _default_root_) {
    root_->assign(*_default_root_);
  }
  clear_has_root();
}
inline const ::std::string& Project::root() const {
  // @@protoc_insertion_point(field_get:ide.proto.Project.root)
  return *root_;
}
inline void Project::set_root(const ::std::string& value) {
  set_has_root();
  if (root_ == _default_root_) {
    root_ = new ::std::string;
  }
  root_->assign(value);
  // @@protoc_insertion_point(field_set:ide.proto.Project.root)
}
inline void Project::set_root(const char* value) {
  set_has_root();
  if (root_ == _default_root_) {
    root_ = new ::std::string;
  }
  root_->assign(value);
  // @@protoc_insertion_point(field_set_char:ide.proto.Project.root)
}
inline void Project::set_root(const char* value, size_t size) {
  set_has_root();
  if (root_ == _default_root_) {
    root_ = new ::std::string;
  }
  root_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ide.proto.Project.root)
}
inline ::std::string* Project::mutable_root() {
  set_has_root();
  if (root_ == _default_root_) {
    root_ = new ::std::string(*_default_root_);
  }
  // @@protoc_insertion_point(field_mutable:ide.proto.Project.root)
  return root_;
}
inline ::std::string* Project::release_root() {
  clear_has_root();
  if (root_ == _default_root_) {
    return NULL;
  } else {
    ::std::string* temp = root_;
    root_ = const_cast< ::std::string*>(_default_root_);
    return temp;
  }
}
inline void Project::set_allocated_root(::std::string* root) {
  if (root_ != _default_root_) {
    delete root_;
  }
  if (root) {
    set_has_root();
    root_ = root;
  } else {
    clear_has_root();
    root_ = const_cast< ::std::string*>(_default_root_);
  }
  // @@protoc_insertion_point(field_set_allocated:ide.proto.Project.root)
}

// repeated string file = 3;
inline int Project::file_size() const {
  return file_.size();
}
inline void Project::clear_file() {
  file_.Clear();
}
inline const ::std::string& Project::file(int index) const {
  // @@protoc_insertion_point(field_get:ide.proto.Project.file)
  return file_.Get(index);
}
inline ::std::string* Project::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:ide.proto.Project.file)
  return file_.Mutable(index);
}
inline void Project::set_file(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ide.proto.Project.file)
  file_.Mutable(index)->assign(value);
}
inline void Project::set_file(int index, const char* value) {
  file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ide.proto.Project.file)
}
inline void Project::set_file(int index, const char* value, size_t size) {
  file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ide.proto.Project.file)
}
inline ::std::string* Project::add_file() {
  return file_.Add();
}
inline void Project::add_file(const ::std::string& value) {
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ide.proto.Project.file)
}
inline void Project::add_file(const char* value) {
  file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ide.proto.Project.file)
}
inline void Project::add_file(const char* value, size_t size) {
  file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ide.proto.Project.file)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Project::file() const {
  // @@protoc_insertion_point(field_list:ide.proto.Project.file)
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Project::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:ide.proto.Project.file)
  return &file_;
}

// repeated .ide.proto.Project.Variant variant = 4;
inline int Project::variant_size() const {
  return variant_.size();
}
inline void Project::clear_variant() {
  variant_.Clear();
}
inline const ::ide::proto::Project_Variant& Project::variant(int index) const {
  // @@protoc_insertion_point(field_get:ide.proto.Project.variant)
  return variant_.Get(index);
}
inline ::ide::proto::Project_Variant* Project::mutable_variant(int index) {
  // @@protoc_insertion_point(field_mutable:ide.proto.Project.variant)
  return variant_.Mutable(index);
}
inline ::ide::proto::Project_Variant* Project::add_variant() {
  // @@protoc_insertion_point(field_add:ide.proto.Project.variant)
  return variant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ide::proto::Project_Variant >&
Project::variant() const {
  // @@protoc_insertion_point(field_list:ide.proto.Project.variant)
  return variant_;
}
inline ::google::protobuf::RepeatedPtrField< ::ide::proto::Project_Variant >*
Project::mutable_variant() {
  // @@protoc_insertion_point(field_mutable_list:ide.proto.Project.variant)
  return &variant_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ide

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_project_2fproject_2eproto__INCLUDED
